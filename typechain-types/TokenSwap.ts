/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenSwapInterface extends utils.Interface {
  contractName: "TokenSwap";
  functions: {
    "owner1()": FunctionFragment;
    "owner2()": FunctionFragment;
    "swap(uint256,uint256)": FunctionFragment;
    "token1()": FunctionFragment;
    "token2()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner1", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;

  events: {};
}

export interface TokenSwap extends BaseContract {
  contractName: "TokenSwap";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner1(overrides?: CallOverrides): Promise<[string]>;

    owner2(overrides?: CallOverrides): Promise<[string]>;

    swap(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    token2(overrides?: CallOverrides): Promise<[string]>;
  };

  owner1(overrides?: CallOverrides): Promise<string>;

  owner2(overrides?: CallOverrides): Promise<string>;

  swap(
    _amount1: BigNumberish,
    _amount2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token1(overrides?: CallOverrides): Promise<string>;

  token2(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    owner1(overrides?: CallOverrides): Promise<string>;

    owner2(overrides?: CallOverrides): Promise<string>;

    swap(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token1(overrides?: CallOverrides): Promise<string>;

    token2(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    owner1(overrides?: CallOverrides): Promise<BigNumber>;

    owner2(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _amount1: BigNumberish,
      _amount2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
