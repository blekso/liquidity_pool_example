/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Silver, SilverInterface } from "../Silver";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f53696c76657200000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f53494c00000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000969291906200024d565b508060049080519060200190620000af9291906200024d565b505050620000c5336064620000cb60201b60201c565b620004a8565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200013d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000134906200035e565b60405180910390fd5b62000151600083836200024360201b60201c565b8060026000828254620001659190620003b9565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001bc9190620003b9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000223919062000427565b60405180910390a36200023f600083836200024860201b60201c565b5050565b505050565b505050565b8280546200025b9062000473565b90600052602060002090601f0160209004810192826200027f5760008555620002cb565b82601f106200029a57805160ff1916838001178555620002cb565b82800160010185558215620002cb579182015b82811115620002ca578251825591602001919060010190620002ad565b5b509050620002da9190620002de565b5090565b5b80821115620002f9576000816000905550600101620002df565b5090565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000346601f83620002fd565b915062000353826200030e565b602082019050919050565b60006020820190508181036000830152620003798162000337565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620003c68262000380565b9150620003d38362000380565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200040b576200040a6200038a565b5b828201905092915050565b620004218162000380565b82525050565b60006020820190506200043e600083018462000416565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048c57607f821691505b602082108103620004a257620004a162000444565b5b50919050565b6116d880620004b86000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806342966c681161007157806342966c68146101a357806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161029d565b6040516100ce9190610e0e565b60405180910390f35b6100f160048036038101906100ec9190610ec9565b61032f565b6040516100fe9190610f24565b60405180910390f35b61010f610352565b60405161011c9190610f4e565b60405180910390f35b61013f600480360381019061013a9190610f69565b61035c565b60405161014c9190610f24565b60405180910390f35b61015d61038b565b60405161016a9190610fd8565b60405180910390f35b61018d60048036038101906101889190610ec9565b610394565b60405161019a9190610f24565b60405180910390f35b6101bd60048036038101906101b89190610ff3565b61043e565b005b6101d960048036038101906101d49190611020565b61044b565b6040516101e69190610f4e565b60405180910390f35b6101f7610493565b6040516102049190610e0e565b60405180910390f35b61022760048036038101906102229190610ec9565b610525565b6040516102349190610f24565b60405180910390f35b61025760048036038101906102529190610ec9565b61060f565b6040516102649190610f24565b60405180910390f35b6102876004803603810190610282919061104d565b610632565b6040516102949190610f4e565b60405180910390f35b6060600380546102ac906110bc565b80601f01602080910402602001604051908101604052809291908181526020018280546102d8906110bc565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60008061033a6106b9565b90506103478185856106c1565b600191505092915050565b6000600254905090565b6000806103676106b9565b905061037485828561088a565b61037f858585610916565b60019150509392505050565b60006012905090565b60008061039f6106b9565b9050610433818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461042e919061111c565b6106c1565b600191505092915050565b6104483382610b95565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104a2906110bc565b80601f01602080910402602001604051908101604052809291908181526020018280546104ce906110bc565b801561051b5780601f106104f05761010080835404028352916020019161051b565b820191906000526020600020905b8154815290600101906020018083116104fe57829003601f168201915b5050505050905090565b6000806105306106b9565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed906111e4565b60405180910390fd5b61060382868684036106c1565b60019250505092915050565b60008061061a6106b9565b9050610627818585610916565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790611276565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690611308565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161087d9190610f4e565b60405180910390a3505050565b60006108968484610632565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109105781811015610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990611374565b60405180910390fd5b61090f84848484036106c1565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c90611406565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90611498565b60405180910390fd5b6109ff838383610d6b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c9061152a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b18919061111c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b7c9190610f4e565b60405180910390a3610b8f848484610d70565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb906115bc565b60405180910390fd5b610c1082600083610d6b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d9061164e565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610ced919061166e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d529190610f4e565b60405180910390a3610d6683600084610d70565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610daf578082015181840152602081019050610d94565b83811115610dbe576000848401525b50505050565b6000601f19601f8301169050919050565b6000610de082610d75565b610dea8185610d80565b9350610dfa818560208601610d91565b610e0381610dc4565b840191505092915050565b60006020820190508181036000830152610e288184610dd5565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e6082610e35565b9050919050565b610e7081610e55565b8114610e7b57600080fd5b50565b600081359050610e8d81610e67565b92915050565b6000819050919050565b610ea681610e93565b8114610eb157600080fd5b50565b600081359050610ec381610e9d565b92915050565b60008060408385031215610ee057610edf610e30565b5b6000610eee85828601610e7e565b9250506020610eff85828601610eb4565b9150509250929050565b60008115159050919050565b610f1e81610f09565b82525050565b6000602082019050610f396000830184610f15565b92915050565b610f4881610e93565b82525050565b6000602082019050610f636000830184610f3f565b92915050565b600080600060608486031215610f8257610f81610e30565b5b6000610f9086828701610e7e565b9350506020610fa186828701610e7e565b9250506040610fb286828701610eb4565b9150509250925092565b600060ff82169050919050565b610fd281610fbc565b82525050565b6000602082019050610fed6000830184610fc9565b92915050565b60006020828403121561100957611008610e30565b5b600061101784828501610eb4565b91505092915050565b60006020828403121561103657611035610e30565b5b600061104484828501610e7e565b91505092915050565b6000806040838503121561106457611063610e30565b5b600061107285828601610e7e565b925050602061108385828601610e7e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110d457607f821691505b6020821081036110e7576110e661108d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061112782610e93565b915061113283610e93565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611167576111666110ed565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006111ce602583610d80565b91506111d982611172565b604082019050919050565b600060208201905081810360008301526111fd816111c1565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611260602483610d80565b915061126b82611204565b604082019050919050565b6000602082019050818103600083015261128f81611253565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006112f2602283610d80565b91506112fd82611296565b604082019050919050565b60006020820190508181036000830152611321816112e5565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061135e601d83610d80565b915061136982611328565b602082019050919050565b6000602082019050818103600083015261138d81611351565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006113f0602583610d80565b91506113fb82611394565b604082019050919050565b6000602082019050818103600083015261141f816113e3565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611482602383610d80565b915061148d82611426565b604082019050919050565b600060208201905081810360008301526114b181611475565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611514602683610d80565b915061151f826114b8565b604082019050919050565b6000602082019050818103600083015261154381611507565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006115a6602183610d80565b91506115b18261154a565b604082019050919050565b600060208201905081810360008301526115d581611599565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611638602283610d80565b9150611643826115dc565b604082019050919050565b600060208201905081810360008301526116678161162b565b9050919050565b600061167982610e93565b915061168483610e93565b925082821015611697576116966110ed565b5b82820390509291505056fea2646970667358221220adf90b85de2faddd2b7f14e90d19e6cb0d2dedc6e8ca08c4c65ff368603fdb3264736f6c634300080d0033";

type SilverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SilverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Silver__factory extends ContractFactory {
  constructor(...args: SilverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Silver";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Silver> {
    return super.deploy(overrides || {}) as Promise<Silver>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Silver {
    return super.attach(address) as Silver;
  }
  connect(signer: Signer): Silver__factory {
    return super.connect(signer) as Silver__factory;
  }
  static readonly contractName: "Silver";
  public readonly contractName: "Silver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SilverInterface {
    return new utils.Interface(_abi) as SilverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Silver {
    return new Contract(address, _abi, signerOrProvider) as Silver;
  }
}
