/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenSwap, TokenSwapInterface } from "../TokenSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount2",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c96380380610c96833981810160405281019061003291906101a1565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610208565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016e82610143565b9050919050565b61017e81610163565b811461018957600080fd5b50565b60008151905061019b81610175565b92915050565b600080600080608085870312156101bb576101ba61013e565b5b60006101c98782880161018c565b94505060206101da8782880161018c565b93505060406101eb8782880161018c565b92505060606101fc8782880161018c565b91505092959194509250565b610a7f806102176000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806325be124e1461005c578063527097251461007a5780637368891414610098578063d21220a7146100b6578063d96073cf146100d4575b600080fd5b6100646100f0565b60405161007191906106a0565b60405180910390f35b610082610116565b60405161008f91906106dc565b60405180910390f35b6100a061013c565b6040516100ad91906106dc565b60405180910390f35b6100be610162565b6040516100cb91906106a0565b60405180910390f35b6100ee60048036038101906100e99190610732565b610186565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061022f5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61026e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610265906107cf565b60405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b81526004016102ec9291906107ef565b602060405180830381865afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d919061082d565b101561036e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610365906108a6565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b81526004016103ee9291906107ef565b602060405180830381865afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f919061082d565b1015610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046790610912565b60405180910390fd5b6104e060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610556565b610552600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610556565b5050565b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b815260040161059593929190610941565b6020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d891906109b0565b90508061061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190610a29565b60405180910390fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061066661066161065c84610621565b610641565b610621565b9050919050565b60006106788261064b565b9050919050565b600061068a8261066d565b9050919050565b61069a8161067f565b82525050565b60006020820190506106b56000830184610691565b92915050565b60006106c682610621565b9050919050565b6106d6816106bb565b82525050565b60006020820190506106f160008301846106cd565b92915050565b600080fd5b6000819050919050565b61070f816106fc565b811461071a57600080fd5b50565b60008135905061072c81610706565b92915050565b60008060408385031215610749576107486106f7565b5b60006107578582860161071d565b92505060206107688582860161071d565b9150509250929050565b600082825260208201905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b60006107b9600e83610772565b91506107c482610783565b602082019050919050565b600060208201905081810360008301526107e8816107ac565b9050919050565b600060408201905061080460008301856106cd565b61081160208301846106cd565b9392505050565b60008151905061082781610706565b92915050565b600060208284031215610843576108426106f7565b5b600061085184828501610818565b91505092915050565b7f546f6b656e203120616c6c6f77616e636520746f6f206c6f7700000000000000600082015250565b6000610890601983610772565b915061089b8261085a565b602082019050919050565b600060208201905081810360008301526108bf81610883565b9050919050565b7f546f6b656e203220616c6c6f77616e636520746f6f206c6f7700000000000000600082015250565b60006108fc601983610772565b9150610907826108c6565b602082019050919050565b6000602082019050818103600083015261092b816108ef565b9050919050565b61093b816106fc565b82525050565b600060608201905061095660008301866106cd565b61096360208301856106cd565b6109706040830184610932565b949350505050565b60008115159050919050565b61098d81610978565b811461099857600080fd5b50565b6000815190506109aa81610984565b92915050565b6000602082840312156109c6576109c56106f7565b5b60006109d48482850161099b565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000610a13601583610772565b9150610a1e826109dd565b602082019050919050565b60006020820190508181036000830152610a4281610a06565b905091905056fea26469706673582212203e52c0b402dc4f0e937f0eaf3b04fc291dda14331b156d1c3845b1a1a5fdafa864736f6c634300080d0033";

type TokenSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSwap__factory extends ContractFactory {
  constructor(...args: TokenSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TokenSwap";
  }

  deploy(
    _token1: string,
    _owner1: string,
    _token2: string,
    _owner2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenSwap> {
    return super.deploy(
      _token1,
      _owner1,
      _token2,
      _owner2,
      overrides || {}
    ) as Promise<TokenSwap>;
  }
  getDeployTransaction(
    _token1: string,
    _owner1: string,
    _token2: string,
    _owner2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token1,
      _owner1,
      _token2,
      _owner2,
      overrides || {}
    );
  }
  attach(address: string): TokenSwap {
    return super.attach(address) as TokenSwap;
  }
  connect(signer: Signer): TokenSwap__factory {
    return super.connect(signer) as TokenSwap__factory;
  }
  static readonly contractName: "TokenSwap";
  public readonly contractName: "TokenSwap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSwapInterface {
    return new utils.Interface(_abi) as TokenSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSwap {
    return new Contract(address, _abi, signerOrProvider) as TokenSwap;
  }
}
